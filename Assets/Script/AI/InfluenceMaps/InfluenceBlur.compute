// See bottom for notes, references and more.

#pragma kernel CSMain
#define blurSize 17

RWTexture2D<unorm float4> Result;
Texture2D<unorm float4> ImageInput;
SamplerState samplerImageInput;

float4 KernelConvolution(const float4 texKernel[blurSize][blurSize], const float convKernel[blurSize][blurSize])
{
    float3 colorSum;
    for (int y = 0; y < blurSize; y++) {
        for (int x = 0; x < blurSize; x++) {
            colorSum += texKernel[y][x].rgb * convKernel[y][x];
        }
    }
    return float4(colorSum, 1.);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    static const float blurKernel[blurSize][blurSize] = {
        0.0, 0.0, 1e-05, 4e-05, 0.0001, 0.00023, 0.00039, 0.00055, 0.00061, 0.00055, 0.00039, 0.00023, 0.0001, 4e-05, 1e-05, 0.0, 0.0, 
        0.0, 1e-05, 6e-05, 0.0002, 0.00055, 0.00119, 0.00207, 0.00288, 0.00322, 0.00288, 0.00207, 0.00119, 0.00055, 0.0002, 6e-05, 1e-05, 0.0, 
        1e-05, 6e-05, 0.00025, 0.00085, 0.00231, 0.005, 0.00869, 0.0121, 0.01351, 0.0121, 0.00869, 0.005, 0.00231, 0.00085, 0.00025, 6e-05, 1e-05, 
        4e-05, 0.0002, 0.00085, 0.00288, 0.00778, 0.01685, 0.02928, 0.04078, 0.04554, 0.04078, 0.02928, 0.01685, 0.00778, 0.00288, 0.00085, 0.0002, 4e-05, 
        0.0001, 0.00055, 0.00231, 0.00778, 0.02102, 0.04554, 0.07912, 0.1102, 0.12307, 0.1102, 0.07912, 0.04554, 0.02102, 0.00778, 0.00231, 0.00055, 0.0001, 
        0.00023, 0.00119, 0.005, 0.01685, 0.04554, 0.09867, 0.17141, 0.23875, 0.26663, 0.23875, 0.17141, 0.09867, 0.04554, 0.01685, 0.005, 0.00119, 0.00023, 
        0.00039, 0.00207, 0.00869, 0.02928, 0.07912, 0.17141, 0.29777, 0.41475, 0.46318, 0.41475, 0.29777, 0.17141, 0.07912, 0.02928, 0.00869, 0.00207, 0.00039, 
        0.00055, 0.00288, 0.0121, 0.04078, 0.1102, 0.23875, 0.41475, 0.57768, 0.64514, 0.57768, 0.41475, 0.23875, 0.1102, 0.04078, 0.0121, 0.00288, 0.00055, 
        0.00061, 0.00322, 0.01351, 0.04554, 0.12307, 0.26663, 0.46318, 0.64514, 0.72048, 0.64514, 0.46318, 0.26663, 0.12307, 0.04554, 0.01351, 0.00322, 0.00061, 
        0.00055, 0.00288, 0.0121, 0.04078, 0.1102, 0.23875, 0.41475, 0.57768, 0.64514, 0.57768, 0.41475, 0.23875, 0.1102, 0.04078, 0.0121, 0.00288, 0.00055, 
        0.00039, 0.00207, 0.00869, 0.02928, 0.07912, 0.17141, 0.29777, 0.41475, 0.46318, 0.41475, 0.29777, 0.17141, 0.07912, 0.02928, 0.00869, 0.00207, 0.00039, 
        0.00023, 0.00119, 0.005, 0.01685, 0.04554, 0.09867, 0.17141, 0.23875, 0.26663, 0.23875, 0.17141, 0.09867, 0.04554, 0.01685, 0.005, 0.00119, 0.00023, 
        0.0001, 0.00055, 0.00231, 0.00778, 0.02102, 0.04554, 0.07912, 0.1102, 0.12307, 0.1102, 0.07912, 0.04554, 0.02102, 0.00778, 0.00231, 0.00055, 0.0001, 
        4e-05, 0.0002, 0.00085, 0.00288, 0.00778, 0.01685, 0.02928, 0.04078, 0.04554, 0.04078, 0.02928, 0.01685, 0.00778, 0.00288, 0.00085, 0.0002, 4e-05, 
        1e-05, 6e-05, 0.00025, 0.00085, 0.00231, 0.005, 0.00869, 0.0121, 0.01351, 0.0121, 0.00869, 0.005, 0.00231, 0.00085, 0.00025, 6e-05, 1e-05, 
        0.0, 1e-05, 6e-05, 0.0002, 0.00055, 0.00119, 0.00207, 0.00288, 0.00322, 0.00288, 0.00207, 0.00119, 0.00055, 0.0002, 6e-05, 1e-05, 0.0, 
        0.0, 0.0, 1e-05, 4e-05, 0.0001, 0.00023, 0.00039, 0.00055, 0.00061, 0.00055, 0.00039, 0.00023, 0.0001, 4e-05, 1e-05, 0.0, 0.0
    };
    
    uint width, height, levels;
    ImageInput.GetDimensions(0, width, height, levels);
    const float2 size = float2(float(width), float(height));

    float4 texKernel[blurSize][blurSize];
    for (int y = 0; y < blurSize; y++) {
        for (int x = 0; x < blurSize; x++) {
            texKernel[y][x] = ImageInput.SampleLevel(samplerImageInput, (id.xy+float2(x-blurSize/2,y-blurSize/2)) / size, 0);
        }
    }
    Result[id.xy] = KernelConvolution(texKernel, blurKernel);
}



// The blur kernel was precomputed based the following article: https://homepages.inf.ed.ac.uk/rbf/HIPR2/gsmooth.htm
// All values for the kernel are computed with the following python code:
//    import math
//    coeff = .47
//    radius = 8
//    
//    def gaussian(x, y):
//        return (1/(2*math.pi*coeff*coeff)) * pow(math.e, -(x*x+y*y)/2*coeff*coeff)
//    
//    for y in range(-radius, radius+1):
//        for x in range(-radius, radius+1):
//            print(round(gaussian(x, y), 5), end=", ")
//        print()
